name: Team Membership Management

on:
  issues:
    types: [closed]

jobs:

  enforce-labels:
    runs-on: ubuntu-latest
    steps:
      
      #check of issue title
      - name: Check if issue title is "Add Me"
        id: check-title
        run: |
          if [[ "${{ github.event.issue.title }}" == "Add Me" ]]; then
            echo "is_add_me_issue=true" >> $GITHUB_OUTPUT
          else
            echo "is_add_me_issue=false" >> $GITHUB_OUTPUT
          fi
      
      #check if valid label or not
      - name: Validate Labels
        id: validate-labels
        if: steps.check-title.outputs.is_add_me_issue == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = context.payload.issue.number;
            const labels = context.payload.issue.labels.map(label => label.name);

            // Allowed labels
            const allowedLabels = ['approved', 'rejected'];
            const allowedLabelCount = labels.filter(label => allowedLabels.includes(label)).length; 

            // Notify the user
            if (labels.length > 1 || allowedLabelCount > 1 || labels.length == 0 ) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `@${context.payload.sender.login}, only one of the following labels is allowed for issues with the title "Add Me": ${allowedLabels.join(', ')}. Extra labels or No labels are not allowed.`,
              });
              console.log("is_label_valid=false");
              return false; // Return false to indicate invalid labels
            } 
            else if ( context.payload.issue.labels[0].name != "approved" && context.payload.issue.labels[0].name != "rejected" ) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `@${context.payload.sender.login}, only one of the following labels is allowed for issues with the title "Add Me": ${allowedLabels.join(', ')}. Other labels are not allowed.`,
              });
              console.log("is_label_valid=false");
              return false; // Return false to indicate invalid labels
            }
            else {
              console.log("is_label_valid=true");
              return true; // Return true to indicate valid labels
            }
       
      #check if admin closed this issue or not
      - name: Check if by admin team
        id: check-admin
        if: steps.validate-labels.outputs.result == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const username = context.payload.sender.login;
            const org = context.repo.owner;
            const teamSlug = 'admins-access';  // Replace with your admin team's slug
            console.log(`${username} - ${org} - ${teamSlug}`)

            try {
              // Check if the user is a member of the admin team
              const { data: membership } = await github.rest.teams.getMembershipForUserInOrg({
                org: org,
                team_slug: teamSlug,
                username: username,
              });

              console.log(`${username} is a member of the admin team.`);
              return true;
            } catch (error) {
              if (error.status === 404) {
                console.log(`${username} is not a member of the admin team.`);
                exit 0;
              } else {
                throw error;
              }
            }
      
      # #stop running jobs
      # - name: Exit if not admin
      #   id: check-if
      #   if: steps.check-admin.outputs.result != 'true'
      #   run: |
      #     exit 0
  # process-approval:
  #   runs-on: ubuntu-latest
  #   needs: assign-issue
  #   if: github.event.action == 'closed' && contains(github.event.issue.assignees.*.login, 'org-admins')
  #   steps:
  #     - name: Check if justification is provided
  #       id: check-justification
  #       run: |
  #         if [[ -z "${{ github.event.issue.body }}" ]]; then
  #           echo "has_justification=false" >> $GITHUB_OUTPUT
  #         else
  #           echo "has_justification=true" >> $GITHUB_OUTPUT
  #         fi

  #     - name: Comment if no justification is provided
  #       if: steps.check-justification.outputs.has_justification == 'false'
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           await github.rest.issues.createComment({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             issue_number: context.issue.number,
  #             body: "⚠️ This issue was closed without a justification. Please reopen the issue and provide a justification for your request."
  #           });

  #     - name: Check if issue was approved or rejected
  #       id: check-labels
  #       if: steps.check-justification.outputs.has_justification == 'true'
  #       run: |
  #         if [[ "${{ github.event.issue.labels[0].name }}" =~ "approved" ]]; then
  #           echo "is_approved=true" >> $GITHUB_OUTPUT
  #         elif [[ "${{ github.event.issue.labels[0].name }}" =~ "rejected" ]]; then
  #           echo "is_approved=false" >> $GITHUB_OUTPUT
  #         else
  #           echo "is_approved=skip" >> $GITHUB_OUTPUT
  #         fi

  #     - name: Add member to team (if not already a member)
  #       if: steps.check-labels.outputs.is_approved == 'true'
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           const username = "${{ github.event.issue.user.login }}";
  #           const org = context.repo.owner;
  #           const teamSlug = 'temp-access';  // Replace with your team slug

  #           try {
  #             // Check if the user is already a member of the team
  #             const { data: membership } = await github.rest.teams.getMembershipForUserInOrg({
  #               org: org,
  #               team_slug: teamSlug,
  #               username: username,
  #             });

  #             console.log(`${username} is already a member of the team. Membership status: ${membership.state}`);
  #           } catch (error) {
  #             if (error.status === 404) {
  #               // User is not a member of the team, so add them
  #               await github.rest.teams.addOrUpdateMembershipForUserInOrg({
  #                 org: org,
  #                 team_slug: teamSlug,
  #                 username: username,
  #               });
  #               console.log(`Added ${username} to the team.`);
  #             } else {
  #               // Handle other errors
  #               throw error;
  #             }
  #           }

  #     - name: Reject member request
  #       if: steps.check-labels.outputs.is_approved == 'false'
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           const username = "${{ github.event.issue.user.login }}";
  #           await github.rest.issues.createComment({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             issue_number: context.issue.number,
  #             body: `❌ Your request to join the team has been rejected.`
  #           });
  #           console.log(`Rejected ${username}'s request to join the team.`);

  #     - name: Comment if no valid label is found
  #       if: steps.check-labels.outputs.is_approved == 'skip'
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           await github.rest.issues.createComment({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             issue_number: context.issue.number,
  #             body: "⚠️ This issue was closed without an 'approved' or 'rejected' label. Please add one of these labels to process the request."
  #           });
